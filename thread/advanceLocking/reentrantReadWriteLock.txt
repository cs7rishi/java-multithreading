:::::::::::::::: ReentrantReadWriteLock::::::::::::::::::

Read Lock and Write Lock


:::::::::::::::: ReentrantReadWriteLock - Why ? :::::::::::::::::

Race Conditions required:
 a. Shared resource accessed by multiple threads
 b. At least one thread modifying the data of the resource

Solution - Complete mutual exclusion
 > Regardless of operation(read/write/both)
 > Lock and allow only one thread to critical section


Ex: Let consider a cache system where read operation is more than write operation
Fig: readWriteLock1

i.e
    # A writer thread updates the cached values periodically but much less
       frequently comparing to read operations.
    # As always we need a lock to protect from race conditions between the reader
        and the writers

Note: Do we really need to protect the reader from another reader of shared resource
NOOOOOOOO

# Multiple threads can safely read from a shared resource concurrently.
As long as they are not modifying resource state in any way.

# All lock we have learnt do not allow multiple reader to access a shared resource concurrently.
# Not a big problem in the general case
# If we keep the critical sections short, the chances of a contention over a lock are minimal.

:::::::::::::::: When to Use ::::::::::::::::::::::

> When read operations are predominant
> Or when the read operations are not as fast
    a. Read from many variables
    b. Read from a complex data structure
> Mutual exclusion of reading threads negatively impacts the performance.


::::::::::::::::: How to Use :::::::::::::::::::::::::

ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
Lock readLock = rwLock.readLock();
Lock writeLock = rwLock.writeLock();

writeLock.lock();
try{
    modifySharedResources*(;
}finally{
    writeLock.unlock();
}

readLock.lock();
try{
    readFromSharedResources();
}finally {
    readLock.unlock();
}


Note:

> Multiple thread can acquire the readLock simultaneously
 # readLock internally keeps the count of how mnay readers thread are holding
    a current moment.
> For writeLock, if threadB tries to acquire writeLock, and thread A already
    has the lock, therefore threadB will get Lockerd.

> Mutual exclusion between riders and writers
  # If a write lock is acquired, no thread can acquire a read lock
  # If a least on threads holds a read lock no thread can acquire a write lock


::::::::::: Summary :::::::::::::::
# Using regular binary lock with read intensive workloads,
    prevents concurrent read from shared resource

# ReentrantReadWriteLock
    > ReadLock
    > WriteLock
    > Allows multiple readers, read shared resource concurrently

